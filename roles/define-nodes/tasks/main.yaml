- name: Load nodes variables
  include_vars:
    file: nodes.yaml

- name: Check that nodes are defined
  assert:
    that:
      - nodes is defined

- name: Define nodes
  loop: '{{ nodes }}'
  loop_control:
    index_var: i
    loop_var: node
  shell: |
    source /etc/profile.d/xcat.sh
    mkdef -f -t node \
      {{ i | node_name }} \
      ip={{ i | node_ip }} \
      bmc={{ i | node_bmc }} \
      mac={{ node.mac }} \
      {% if service_network_enabled is defined and service_network_enabled %}bmcusername={{ node.ipmi_user | default(ipmi_user) }} \
      bmcpassword={{ node.ipmi_password | default(ipmi_password) }}{% endif %} \
      mgt=ipmi \
      groups=compute,all \
      netboot=xnba \
      arch=x86_64
      kinit admin <<< "{{ ipadm_password }}"
      ipa host-add  --ip-address={{ i | node_ip }} {{ i | node_name }}.{{ domain_name }}
      ipa host-add-managedby --hosts={{ fqdn }} {{ i | node_name }}.{{ domain_name }}
      ipa host-mod $(cat /opt/versatushpc/xcat/ssh_host_*.pub | awk '{ print $2 }' | xargs -n1 -I% echo --sshpubkey=\'%\' | paste -s) --updatedns {{ i | node_name }}.{{ domain_name }}
      makehosts {{ i | node_name }}
      makedhcp {{ i | node_name }}
      ipa-getkeytab -s {{ fqdn }} -D "cn=Directory Manager" -w {{ ipadm_password }} -p host/{{ i | node_name }}.{{ domain_name }} -k /opt/versatushpc/etc/{{ i | node_name }}-krb5.keytab

- name: Configure Infiniband
  when: ib_stack != "none"
  include_tasks: roles/infiniband/tasks/setup-nodes.yaml

- name: Add keytab to compute.synclist
  lineinfile:
    path: '{{ synclist }}'
    create: yes
    line: '/opt/versatushpc/etc/{{ i | node_name }}-krb5.keytab -> ({{ i | node_name }}) /etc/krb5.keytab'
  loop: '{{ nodes }}'
  loop_control:
    index_var: i
    loop_var: node

- name: Add compute.synclist to the image
  shell: |
    source /etc/profile.d/xcat.sh
    chdef -t osimage -o {{ genimage_name }} synclists="{{ synclist }}"

- name: Create ipa-join postscript
  copy:
    dest: /opt/versatushpc/xcat/postscripts/ipa-join
    mode: '0755'
    content: |
      domain_to_basedn() {
          for i in $(echo $1 | tr -s . ' '); do
              echo -n dc=$i,;
          done | sed -e 's/,$//';
      }

      exec 1> >(logger -s -t xCAT -p local4.info) 2>&1

      mkdir -p /etc/{ipa,ssh,sssd,openldap}/

      : ${DHCPINTERFACES:='headnode.cluster.example.com|eth1'} # fallback for testing

      domain="$(hostname -d)"
      nodename="$(hostname --fqdn)"
      basedn="$(domain_to_basedn $domain)"
      headnode=$(echo ${DHCPINTERFACES} | sed "s/'//g; s/\(.*\?\)|.*/\1/") # this came from xCAT site table
      realm="${domain^^}"

      # On the image
      cat > /etc/sssd/sssd.conf << EOF
      [domain/$domain]

      cache_credentials = True
      krb5_store_password_if_offline = True
      ipa_domain = $domain
      id_provider = ipa
      auth_provider = ipa
      access_provider = ipa
      ipa_hostname = $nodename
      chpass_provider = ipa
      ipa_server = _srv_, $headnode
      ldap_tls_cacert = /etc/ipa/ca.crt
      [sssd]
      services = nss, sudo, pam, ssh

      domains = $domain
      [nss]
      homedir_substring = /home

      [pam]

      [sudo]

      [autofs]

      [ssh]

      [pac]

      [ifp]

      [secrets]

      [session_recording]

      EOF

      chown root:root /etc/sssd/sssd.conf
      chmod 600 /etc/sssd/sssd.conf

      authconfig --update --enablesssd --enablesssdauth

      cat > /etc/krb5.conf << EOF
      includedir /etc/krb5.conf.d/
      includedir /var/lib/sss/pubconf/krb5.include.d/

      [libdefaults]
        default_realm = $realm
        dns_lookup_realm = true
        dns_lookup_kdc = true
        rdns = false
        dns_canonicalize_hostname = false
        ticket_lifetime = 24h
        forwardable = true
        udp_preference_limit = 0
        default_ccache_name = KEYRING:persistent:%{uid}


      [realms]
        $realm = {
          pkinit_anchors = FILE:/var/lib/ipa-client/pki/kdc-ca-bundle.pem
          pkinit_pool = FILE:/var/lib/ipa-client/pki/ca-bundle.pem

        }


      [domain_realm]
        .$domain                     = $realm
        $domain                      = $realm
        $nodename                    = $realm

      EOF

      curl -o /etc/ipa/ca.crt http://$headnode/ipa/config/ca.crt

      certutil -A -d /etc/ipa/nssdb -n "IPA CA" -t CT,C,C -a -i /etc/ipa/ca.crt

      systemctl start certmonger.service
      systemctl enable certmonger.service

      ipa-getcert request -d /etc/pki/nssdb -n Server-Cert -K HOST/$nodename -N "CN=$nodename,O=$realm"

      # This is weird; the NIS domain should be the domain and not the hostname:
      authconfig --nisdomain=$nodename --update

      cat >> /etc/nsswitch.conf << EOF

      sudoers: files sss

      EOF

      # My changes
      cat > /etc/ipa/default.conf << EOF
      [global]
      basedn = $basedn
      realm = $realm
      domain = $domain
      server = $headnode
      host = $nodename
      xmlrpc_uri = https://$headnode/ipa/xml
      enable_ra = True
      EOF

      cat >> /etc/openldap/ldap.conf << EOF
      URI ldaps://$headnode
      BASE $basedn
      TLS_CACERT /etc/ipa/ca.crt
      EOF

      cat >> /etc/ssh/ssh_config << EOF

      GlobalKnownHostsFile /var/lib/sss/pubconf/known_hosts
      PubkeyAuthentication yes
      ProxyCommand /usr/bin/sss_ssh_knownhostsproxy -p %p %h

      Host *
          GSSAPIAuthentication yes
      # If this option is set to yes then remote X11 clients will have full access
      # to the original X11 display. As virtually no X11 client supports the untrusted
      # mode correctly we set this to yes.
          ForwardX11Trusted yes
      # Send locale-related environment variables
          SendEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
          SendEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
          SendEnv LC_IDENTIFICATION LC_ALL LANGUAGE
          SendEnv XMODIFIERS
      EOF

      cat >> /etc/ssh/sshd_config << EOF
      KerberosAuthentication no
      PubkeyAuthentication yes
      UsePAM yes
      AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys
      GSSAPIAuthentication yes
      ChallengeResponseAuthentication yes
      AuthorizedKeysCommandUser nobody
      EOF

      systemctl start sssd
      systemctl enable sssd
      systemctl restart sshd

- name: Add ipa-join to image
  shell: |
    source /etc/profile.d/xcat.sh
    chdef -t osimage -o {{ genimage_name }} -p postscripts=versatushpc/ipa-join

- name: Create host group
  shell: |
    kinit admin <<< {{ ipadm_password }}
    ipa hostgroup-add --desc="Compute Nodes" compute
  ignore_errors: yes

- name: Add host to hostgroup
  shell: |
    kinit admin <<< {{ ipadm_password }}
    ipa hostgroup-add-member --hosts={{ i | node_name }}.{{ domain_name }} compute
  ignore_errors: yes
  loop: '{{ nodes }}'
  loop_control:
    loop_var: node
    index_var: i

- name: Configure SSH for HBA on server
  lineinfile:
    state: present
    line: '{{ item }}'
    insertafter: '^Host *'
    path: /etc/ssh/ssh_config
  loop:
    - "\tHostbasedAuthentication yes"
    - "\tEnableSSHKeysign yes"

- name: Add hostbased-auth postscript
  copy:
    dest: /opt/versatushpc/xcat/postinstall/hostbased-auth
    mode: '0755'
    content: |
      #!/bin/sh -x

      # Configure Image Clientside
      grep -E 'HostbasedAuthentication yes' $IMG_ROOTIMGDIR/etc/ssh/ssh_config || echo -e "\tHostbasedAuthentication yes" >> $IMG_ROOTIMGDIR/etc/ssh/ssh_config
      grep -E 'EnableSSHKeysign yes'        $IMG_ROOTIMGDIR/etc/ssh/ssh_config || echo -e "\tEnableSSHKeysign yes"        >> $IMG_ROOTIMGDIR/etc/ssh/ssh_config

      # Configure Image Serverside
      test -f $IMG_ROOTIMGDIR/etc/ssh/shosts.equiv || cat <<EOF2 > $IMG_ROOTIMGDIR/etc/ssh/shosts.equiv
      headnode.cluster.example.com
      @compute
      EOF2

      cat $IMG_ROOTIMGDIR/etc/ssh/sshd_config
      sed -e 's/^#HostbasedAuthentication no/HostbasedAuthentication yes/' -i~ $IMG_ROOTIMGDIR/etc/ssh/sshd_config
      cat $IMG_ROOTIMGDIR/etc/ssh/sshd_config

      # Create the known_hosts file with the keys:
      export DSA_KEY=`cat $IMG_ROOTIMGDIR/etc/ssh/ssh_host_dsa_key.pub | cut -f 2 -d " "`
      export RSA_KEY=`cat $IMG_ROOTIMGDIR/etc/ssh/ssh_host_rsa_key.pub | cut -f 2 -d " "`
      export ECDSA_KEY=`cat $IMG_ROOTIMGDIR/etc/ssh/ssh_host_ecdsa_key.pub | cut -f 2 -d " "`
      export ED25519_KEY=`cat $IMG_ROOTIMGDIR/etc/ssh/ssh_host_ed25519_key.pub | cut -f 2 -d " "`

      ssh-keyscan headnode.cluster.example.com > $IMG_ROOTIMGDIR/etc/ssh/ssh_known_hosts
      cat <<EOF2 >> $IMG_ROOTIMGDIR/etc/ssh/ssh_known_hosts
      node* ssh-dsa $DSA_KEY
      node* ssh-ed25519 $RSA_KEY
      node* ecdsa-sha2-nistp256 $ECDSA_KEY
      node* ssh-rsa $ED25519_KEY
      EOF2

- name: Add hostbased-auth to image
  shell: |
    source /etc/profile.d/xcat.sh
    chdef -t osimage -o {{ genimage_name }} -p postinstall=/opt/versatushpc/xcat/postinstall/hostbased-auth

- name: Define hosts in PBS
  when: "'pbspro-server-ohpc' in ansible_facts.packages"
  include_tasks: roles/pbs/tasks/setup-nodes.yaml

- name: Define hosts on Slurm
  when: "'ohpc-slurm-server' in ansible_facts.packages"
  include_tasks: roles/slurm/tasks/setup-nodes.yaml

- name: Install pigz
  yum:
    name: pigz
    state: present

- name: Generate and pack image
  shell: |
    source /etc/profile.d/xcat.sh
    genimage {{ genimage_name }}
    packimage {{ genimage_name }}
  tags:
    - genimage

- name: Run nodeset on new nodes
  shell: |
    source /etc/profile.d/xcat.sh
    nodeset {{ nodes | length | nodes_names | join(",") }} osimage={{ genimage_name }}

- name: Update dhcpd with nodes
  shell: |
    source /etc/profile.d/xcat.sh
    makedhcp -a
